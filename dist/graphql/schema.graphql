	# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from "../generated/prisma.graphql"
		type Query{
       me: User!
       users(query: String, first: Int, skip: Int, after: ID, orderBy: UserOrderByInput): [User!]!
       post(id: ID!): Post!
			 comments(first: Int, skip: Int, after: ID , orderBy: CommentOrderByInput): [Comment!]!
			 myPosts(query: String, first: Int, skip: Int, after: ID, orderBy: PostOrderByInput): [Post!]!
			 posts(query: String, first: Int, skip: Int, after: ID, orderBy: PostOrderByInput): [Post!]!
    }
  

		type Mutation{
			createUser(data: CreateUserInput!): AuthPayload!
			login(data: LoginUserInput!): AuthPayload!
			createPost(data: CreatePostInput!): Post!
			createComment(data: CreateCommentInput!): Comment!
			deleteUser: User!
			deletePost(id: ID!): Post!
			deleteComment(id: ID!): Comment!
			updateUser(data: UpdateUserInput!): User!
			updatePost(id: ID!, data: UpdatePostInput!): Post!
			updateComment(id: ID!, data: UpdateCommentInput!): Comment!
		}

    type Subscription{	
			# count: Int!
			comment(postId: ID!): CommentSubscriptionPayload!
			post: PostSubscriptionPayload!
			myPost: PostSubscriptionPayload!
		}
    
		type AuthPayload{
			token: String!
			user: User!
		}

		input CreateUserInput {
			name: String!
			email: String!
			age: Int
			password: String!
		}

		input LoginUserInput{
			email: String!
			password: String!
		}

		input CreatePostInput{
			title: String!
			body:String!
			published: Boolean!
		}

		input CreateCommentInput{
			post: ID!
		  text: String!
		}

    input UpdateUserInput{
			name: String
			email: String
			password: String
			age: Int
		}

    type User{
      id: ID!
      name: String!
      email: String!
      age: Int
			# post: Post!
			posts: [Post!]!
			comments: [Comment!]!
			updatedAt: String!
			createdAt: String!
    }
    type Post{
      id: ID!
      title: String!
      body: String!
      published: Boolean!
			author: User!
			comments: [Comment!]
			updatedAt: String!
			createdAt: String!
    }
		type Comment{
			id: ID!
			text: String!
			author: User!
			post: Post!
			updatedAt: String!
			createdAt: String!
		}

		input UpdatePostInput{
			title: String
      body: String
			published: Boolean
		}

		input UpdateCommentInput{
			text: String
		}
		 
		enum MutationType{
			CREATED
			UPDATED
			DELETED
		}

		type PostSubscriptionPayload{
			mutation: MutationType!
			node: Post!
		}

		type CommentSubscriptionPayload{
			mutation: MutationType!
			node: Comment!
		}